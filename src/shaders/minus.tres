[gd_resource type="VisualShader" load_steps=8 format=3 uid="uid://bdvpthgbybfsc"]

[sub_resource type="VisualShaderNodeIf" id="VisualShaderNodeIf_hmgpx"]
default_input_values = [0, 0.0, 1, 0.35, 2, 1e-05, 3, Vector3(0, 0, 0), 4, Vector3(0, 0, 0), 5, Vector3(0, 0, 0)]

[sub_resource type="VisualShaderNodeIf" id="VisualShaderNodeIf_2eahc"]
default_input_values = [0, 0.0, 1, 0.65, 2, 1e-05, 3, Vector3(0, 0, 0), 4, Vector3(0, 0, 0), 5, Vector3(0, 0, 0)]

[sub_resource type="VisualShaderNodeIf" id="VisualShaderNodeIf_apgxy"]
default_input_values = [0, 0.0, 1, 0.47, 2, 1e-05, 3, Vector3(0, 0, 0), 4, Vector3(0, 0, 0), 5, Vector3(0, 0, 0)]

[sub_resource type="VisualShaderNodeIf" id="VisualShaderNodeIf_of3ag"]
default_input_values = [0, 0.0, 1, 0.53, 2, 1e-05, 3, Vector3(0, 0, 0), 4, Vector3(0, 0, 0), 5, Vector3(0, 0, 0)]

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_e8gkv"]
input_name = "color"

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_ybeqp"]
expanded_output_ports = [0]
input_name = "uv"

[sub_resource type="VisualShaderNodeColorConstant" id="VisualShaderNodeColorConstant_3jaxi"]

[resource]
code = "shader_type canvas_item;
render_mode blend_mix;




void fragment() {
// Input:2
	vec2 n_out2p0 = UV;
	float n_out2p1 = n_out2p0.r;
	float n_out2p2 = n_out2p0.g;


// Input:16
	vec4 n_out16p0 = COLOR;


// ColorConstant:3
	vec4 n_out3p0 = vec4(1.000000, 1.000000, 1.000000, 1.000000);


	vec3 n_out12p0;
// If:12
	float n_in12p1 = 0.35000;
	float n_in12p2 = 0.00001;
	vec3 n_in12p3 = vec3(0.00000, 0.00000, 0.00000);
	if(abs(n_out2p1 - n_in12p1) < n_in12p2)
	{
		n_out12p0 = n_in12p3;
	}
	else if(n_out2p1 < n_in12p1)
	{
		n_out12p0 = vec3(n_out16p0.xyz);
	}
	else
	{
		n_out12p0 = vec3(n_out3p0.xyz);
	}


	vec3 n_out13p0;
// If:13
	float n_in13p1 = 0.65000;
	float n_in13p2 = 0.00001;
	vec3 n_in13p3 = vec3(0.00000, 0.00000, 0.00000);
	if(abs(n_out2p1 - n_in13p1) < n_in13p2)
	{
		n_out13p0 = n_in13p3;
	}
	else if(n_out2p1 < n_in13p1)
	{
		n_out13p0 = n_out12p0;
	}
	else
	{
		n_out13p0 = vec3(n_out16p0.xyz);
	}


	vec3 n_out14p0;
// If:14
	float n_in14p1 = 0.47000;
	float n_in14p2 = 0.00001;
	vec3 n_in14p3 = vec3(0.00000, 0.00000, 0.00000);
	if(abs(n_out2p2 - n_in14p1) < n_in14p2)
	{
		n_out14p0 = n_in14p3;
	}
	else if(n_out2p2 < n_in14p1)
	{
		n_out14p0 = vec3(n_out16p0.xyz);
	}
	else
	{
		n_out14p0 = n_out13p0;
	}


	vec3 n_out15p0;
// If:15
	float n_in15p1 = 0.53000;
	float n_in15p2 = 0.00001;
	vec3 n_in15p3 = vec3(0.00000, 0.00000, 0.00000);
	if(abs(n_out2p2 - n_in15p1) < n_in15p2)
	{
		n_out15p0 = n_in15p3;
	}
	else if(n_out2p2 < n_in15p1)
	{
		n_out15p0 = n_out14p0;
	}
	else
	{
		n_out15p0 = vec3(n_out16p0.xyz);
	}


// Output:0
	COLOR.rgb = n_out15p0;


}
"
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(1280, 340)
nodes/fragment/2/node = SubResource("VisualShaderNodeInput_ybeqp")
nodes/fragment/2/position = Vector2(-300, 220)
nodes/fragment/3/node = SubResource("VisualShaderNodeColorConstant_3jaxi")
nodes/fragment/3/position = Vector2(-180, 500)
nodes/fragment/12/node = SubResource("VisualShaderNodeIf_hmgpx")
nodes/fragment/12/position = Vector2(160, 160)
nodes/fragment/13/node = SubResource("VisualShaderNodeIf_2eahc")
nodes/fragment/13/position = Vector2(440, 200)
nodes/fragment/14/node = SubResource("VisualShaderNodeIf_apgxy")
nodes/fragment/14/position = Vector2(700, 260)
nodes/fragment/15/node = SubResource("VisualShaderNodeIf_of3ag")
nodes/fragment/15/position = Vector2(960, 340)
nodes/fragment/16/node = SubResource("VisualShaderNodeInput_e8gkv")
nodes/fragment/16/position = Vector2(-260, 840)
nodes/fragment/connections = PackedInt32Array(2, 1, 12, 0, 3, 0, 12, 4, 12, 0, 13, 5, 2, 1, 13, 0, 13, 0, 14, 4, 2, 2, 14, 0, 14, 0, 15, 5, 2, 2, 15, 0, 15, 0, 0, 0, 16, 0, 12, 5, 16, 0, 13, 4, 16, 0, 14, 5, 16, 0, 15, 4)
